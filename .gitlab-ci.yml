
stages:
  - containers
  - builds
  - sanity_checks

.script_variables: &script_variables |
  export MAKEFLAGS="-j$(getconf _NPROCESSORS_ONLN)"
  export SCRATCH_DIR="/tmp/scratch"
  export VROOT="$SCRATCH_DIR/vroot"
  export LIBDIR="$VROOT/lib"
  export CCACHE_DIR="$PWD/ccache"
  export CCACHE_MAXSIZE="500M"
  export PATH="$CCACHE_WRAPPERSDIR:$VROOT/bin:$PATH"
  export PKG_CONFIG_PATH="$LIBDIR/pkgconfig"
  export LD_LIBRARY_PATH="$LIBDIR"


# Common templates

.container_job_template: &container_job_definition
  image: docker:stable
  stage: containers
  services:
    - docker:dind
  before_script:
    - export TAG="$CI_REGISTRY_IMAGE/ci-$NAME:latest"
    - export COMMON_TAG="$CI_REGISTRY/libvirt/libvirt-glib/ci-$NAME:latest"
    - docker info
    - docker login registry.gitlab.com -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
  script:
    - docker pull "$TAG" || docker pull "$COMMON_TAG" || true
    - docker build --cache-from "$TAG" --cache-from "$COMMON_TAG" --tag "$TAG" -f "ci/containers/ci-$NAME.Dockerfile" ci
    - docker push "$TAG"
  after_script:
    - docker logout

.git_native_build_job_template: &git_native_build_job_definition
  image: $CI_REGISTRY_IMAGE/ci-$NAME:latest
  stage: builds
  cache:
    paths:
      - ccache/
    key: "$CI_JOB_NAME"
  before_script:
    - *script_variables
  script:
    - pushd "$PWD"
    - mkdir -p "$SCRATCH_DIR"
    - cd "$SCRATCH_DIR"
    - git clone --depth 1 https://gitlab.com/libvirt/libvirt.git
    - cd libvirt
    - meson build -Ddriver_libvirtd=disabled "--prefix=$VROOT" "--libdir=$LIBDIR"
    - ninja -C build install
    - popd
    - meson build
    - ninja -C build dist
    - if test -x /usr/bin/rpmbuild && test "$RPM" != "skip";
      then
        rpmbuild --nodeps -ta build/meson-dist/libvirt-glib-*.tar.xz;
      fi

.dist_native_build_job_template: &dist_native_build_job_definition
  image: $CI_REGISTRY_IMAGE/ci-$NAME:latest
  stage: builds
  cache:
    paths:
      - ccache/
    key: "$CI_JOB_NAME"
  before_script:
    - *script_variables
  script:
    - meson build
    - ninja -C build dist
    - if test -x /usr/bin/rpmbuild && test "$RPM" != "skip";
      then
        rpmbuild --nodeps -ta build/meson-dist/libvirt-glib-*.tar.xz;
      fi

.git_cross_build_default_job_template: &git_cross_build_default_job_definition
  image: $CI_REGISTRY_IMAGE/ci-$NAME:latest
  stage: builds
  cache:
    paths:
      - ccache/
    key: "$CI_JOB_NAME"
  before_script:
    - *script_variables
  script:
    - pushd "$PWD"
    - mkdir -p "$SCRATCH_DIR"
    - cd "$SCRATCH_DIR"
    - git clone --depth 1 https://gitlab.com/libvirt/libvirt.git
    - cd libvirt
    - meson build -Ddriver_libvirtd=disabled "--prefix=$VROOT" "--libdir=$LIBDIR" $MESON_OPTS
    - ninja -C build install
    - popd
    - meson build --werror $MESON_OPTS || (cat build/meson-logs/meson-log.txt && exit 1)
    - ninja -C build

# Jobs that we delegate to Cirrus CI because they require an operating
# system other than Linux. These jobs will only run if the required
# setup has been performed on the GitLab account (see ci/README.rst).
#
# The Cirrus CI configuration is generated by replacing target-specific
# variables in a generic template: some of these variables are provided
# when the GitLab CI job is defined, others are taken from a shell
# snippet generated using lcitool.
#
# Note that the $PATH environment variable has to be treated with
# special care, because we can't just override it at the GitLab CI job
# definition level or we risk breaking it completely.
.cirrus_build_job:
  stage: builds
  image: registry.gitlab.com/libvirt/libvirt-ci/cirrus-run:master
  needs: []
  script:
    - source ci/cirrus/$NAME.vars
    - sed -e "s|[@]CI_REPOSITORY_URL@|$CI_REPOSITORY_URL|g"
          -e "s|[@]CI_COMMIT_REF_NAME@|$CI_COMMIT_REF_NAME|g"
          -e "s|[@]CI_COMMIT_SHA@|$CI_COMMIT_SHA|g"
          -e "s|[@]CIRRUS_VM_INSTANCE_TYPE@|$CIRRUS_VM_INSTANCE_TYPE|g"
          -e "s|[@]CIRRUS_VM_IMAGE_SELECTOR@|$CIRRUS_VM_IMAGE_SELECTOR|g"
          -e "s|[@]CIRRUS_VM_IMAGE_NAME@|$CIRRUS_VM_IMAGE_NAME|g"
          -e "s|[@]UPDATE_COMMAND@|$UPDATE_COMMAND|g"
          -e "s|[@]INSTALL_COMMAND@|$INSTALL_COMMAND|g"
          -e "s|[@]PATH@|$PATH_EXTRA${PATH_EXTRA:+:}\$PATH|g"
          -e "s|[@]PKG_CONFIG_PATH@|$PKG_CONFIG_PATH|g"
          -e "s|[@]XML_CATALOG_FILES@|$XML_CATALOG_FILES|g"
          -e "s|[@]PKGS@|$PKGS|g"
          -e "s|[@]MAKE@|$MAKE|g"
          -e "s|[@]PYTHON@|$PYTHON|g"
          -e "s|[@]PIP3@|$PIP3|g"
          -e "s|[@]PYPI_PKGS@|$PYPI_PKGS|g"
      <ci/cirrus/build.yml >ci/cirrus/$NAME.yml
    - cat ci/cirrus/$NAME.yml
    - cirrus-run -v --show-build-log always ci/cirrus/$NAME.yml
  rules:
    - if: "$TEMPORARILY_DISABLED"
      allow_failure: true
    - if: "$CIRRUS_GITHUB_REPO && $CIRRUS_API_TOKEN"


# Native container build jobs

x64-centos-7-container:
  <<: *container_job_definition
  variables:
    NAME: centos-7

x64-centos-8-container:
  <<: *container_job_definition
  variables:
    NAME: centos-8

x64-centos-stream-container:
  <<: *container_job_definition
  variables:
    NAME: centos-stream

x64-debian-10-container:
  <<: *container_job_definition
  variables:
    NAME: debian-10

x64-debian-sid-container:
  <<: *container_job_definition
  variables:
    NAME: debian-sid

x64-fedora-32-container:
  <<: *container_job_definition
  variables:
    NAME: fedora-32

x64-fedora-33-container:
  <<: *container_job_definition
  variables:
    NAME: fedora-33

x64-fedora-rawhide-container:
  <<: *container_job_definition
  variables:
    NAME: fedora-rawhide

x64-opensuse-152-container:
  <<: *container_job_definition
  variables:
    NAME: opensuse-152

x64-ubuntu-1804-container:
  <<: *container_job_definition
  variables:
    NAME: ubuntu-1804

x64-ubuntu-2004-container:
  <<: *container_job_definition
  variables:
    NAME: ubuntu-2004


# Cross-build containers build jobs

mingw32-fedora-rawhide-container:
  <<: *container_job_definition
  variables:
    NAME: fedora-rawhide-cross-mingw32

mingw64-fedora-rawhide-container:
  <<: *container_job_definition
  variables:
    NAME: fedora-rawhide-cross-mingw64


# Native architecture build + test jobs

x64-centos-8-git-build:
  <<: *git_native_build_job_definition
  needs:
    - x64-centos-8-container
  variables:
    NAME: centos-8
    RPM: skip

x64-centos-7-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-centos-7-container
  variables:
    NAME: centos-7
    RPM: skip

x64-centos-8-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-centos-8-container
  variables:
    NAME: centos-8
    RPM: skip

x64-centos-stream-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-centos-stream-container
  variables:
    NAME: centos-stream
    RPM: skip

x64-debian-10-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-debian-10-container
  variables:
    NAME: debian-10

x64-debian-sid-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-debian-sid-container
  variables:
    NAME: debian-sid

x64-fedora-32-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-fedora-32-container
  variables:
    NAME: fedora-32

x64-fedora-33-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-fedora-33-container
  variables:
    NAME: fedora-33

x64-fedora-rawhide-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-fedora-rawhide-container
  variables:
    NAME: fedora-rawhide

x64-opensuse-152-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-opensuse-152-container
  variables:
    NAME: opensuse-152
    RPM: skip

x64-ubuntu-1804-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-ubuntu-1804-container
  variables:
    NAME: ubuntu-1804

x64-ubuntu-2004-dist-build:
  <<: *dist_native_build_job_definition
  needs:
    - x64-ubuntu-2004-container
  variables:
    NAME: ubuntu-2004

x64-freebsd-11-build:
  extends: .cirrus_build_job
  variables:
    NAME: freebsd-11
    CIRRUS_VM_INSTANCE_TYPE: freebsd_instance
    CIRRUS_VM_IMAGE_SELECTOR: image_family
    CIRRUS_VM_IMAGE_NAME: freebsd-11-4
    UPDATE_COMMAND: pkg update
    INSTALL_COMMAND: pkg install -y
    XML_CATALOG_FILES: /usr/local/share/xml/catalog

x64-freebsd-12-build:
  extends: .cirrus_build_job
  variables:
    NAME: freebsd-12
    CIRRUS_VM_INSTANCE_TYPE: freebsd_instance
    CIRRUS_VM_IMAGE_SELECTOR: image_family
    CIRRUS_VM_IMAGE_NAME: freebsd-12-2
    UPDATE_COMMAND: pkg update
    INSTALL_COMMAND: pkg install -y
    XML_CATALOG_FILES: /usr/local/share/xml/catalog

x64-macos-11-build:
  extends: .cirrus_build_job
  variables:
    NAME: macos-11
    CIRRUS_VM_INSTANCE_TYPE: osx_instance
    CIRRUS_VM_IMAGE_SELECTOR: image
    CIRRUS_VM_IMAGE_NAME: big-sur-base
    UPDATE_COMMAND: brew update
    INSTALL_COMMAND: brew install
    PATH_EXTRA: /usr/local/opt/ccache/libexec:/usr/local/opt/gettext/bin:/usr/local/opt/rpcgen/bin
    PKG_CONFIG_PATH: /usr/local/opt/libxml2/lib/pkgconfig
    XML_CATALOG_FILES: /usr/local/etc/xml/catalog


# Cross compiled build jobs

mingw32-fedora-rawhide-git-build:
  <<: *git_cross_build_default_job_definition
  needs:
    - mingw32-fedora-rawhide-container
  variables:
    NAME: fedora-rawhide-cross-mingw32

mingw64-fedora-rawhide-git-build:
  <<: *git_cross_build_default_job_definition
  needs:
    - mingw64-fedora-rawhide-container
  variables:
    NAME: fedora-rawhide-cross-mingw64


# Check that all commits are signed-off for the DCO.
# Skip on "libvirt" namespace, since we only need to run
# this test on developer's personal forks from which
# merge requests are submitted
check-dco:
  stage: sanity_checks
  needs: []
  image: registry.gitlab.com/libvirt/libvirt-ci/check-dco:master
  script:
    - /check-dco
  except:
    variables:
      - $CI_PROJECT_NAMESPACE == 'libvirt'
